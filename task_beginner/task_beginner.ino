/*//////////////////////////////////////////////////////////////////////////////////////////
 INITIATES THE TASKCODES FOR THE CORES
*///----------------------------------------------------------------------------------------
void TaskCode1( void *pvParameters );  //Initiates TaskCode1
void TaskCode2( void *pvParameters );  //Initiates TaskCode2
///////////////////////////////////////////////////////////////////////////////////////////

/*//////////////////////////////////////////////////////////////////////////////////////////
 POINTS THE TASK HANDLE TO THE TASK BLOCK
*///---------------------------------------------------------------------------------------
TaskHandle_t Task1;  //Assigned to Core 1
TaskHandle_t Task2;  //Assigned to Core 1
///////////////////////////////////////////////////////////////////////////////////////////

/*/////////////////////////////////////////////////////////////////////////////////////////
 BEGIN SETUP
*//////////////////////////////////////////////////////////////////////////////////////////
void setup() 
{  // OPENS the void setup
Serial.begin(115200);         // Baud Rate for Serial Monitor
/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                    TASK PARAMETERS
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*/////////////////////////////////////////////////////////////////////////////////////////
------------------------------------------ TASK 1 -----------------------------------------
///////////////////////////////////////////////////////////////////////////////////////////
 TASK NAME - Task1
 TASK CREATION , CORE EXECUTION AND PRIORITY
-------------------------------------------------------------------------------------------
 Create Task1 , Executed in TaskCode1() function , On Core 0 , Priority 0
-------------------------------------------------------------------------------------------
*///  xTaskCreatePinnedToCore(TaskCode1, "Task1", 10000, NULL, 0, &Task1,  0); 
xTaskCreatePinnedToCore(
  TaskCode1,          // Task function.
    "Task1",          // name of task.
      10000,          // Stack size of task
       NULL,          // parameter of the task
          0,          // priority of the task 0 - 3
     &Task1,          // Task handle to keep track of created task
         1);          // pin task to core X                 
delay(5); 
/*/////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////
------------------------------------------ TASK 2 -----------------------------------------
///////////////////////////////////////////////////////////////////////////////////////////
 TASK NAME - Task2
 TASK CREATION , CORE EXECUTION AND PRIORITY
-------------------------------------------------------------------------------------------
 Create Task2 , Executed in TaskCode2() function , On Core 0 , Priority 0
-------------------------------------------------------------------------------------------
*///  xTaskCreatePinnedToCore(TaskCode2, "Task2", 10000, NULL, 0, &Task2,  0); 
xTaskCreatePinnedToCore(
  TaskCode2,          // Task function.
    "Task2",          // name of task.
      10000,          // Stack size of task
       NULL,          // parameter of the task
          1,          // priority of the task 0 - 3
     &Task2,          // Task handle to keep track of created task
         1);          // pin task to core X                 
delay(5); 
/*/////////////////////////////////////////////////////////////////////////////////////////


*//////////////////////////////////////////////////////////////////////////////////////////
// CLOSE SETUP
///////////////////////////////////////////////////////////////////////////////////////////
} // CLOSES the void setup

///////////////////////////////////////////////////////////////////////////////////////////
//---------------------------------------- TASKCODE 1 ---------------------------------------
///////////////////////////////////////////////////////////////////////////////////////////
//  TaskCode1:  - 
//-------------------------------------------------------------------------------------------
void TaskCode1( void * pvParameters )
{ // OPENS TaskCode1
vTaskDelay(500);
  Serial.println("----------------------------------------------------------------");                         
  Serial.println("---------------------------- TaskCode1 -------------------------");
  Serial.println(" DETAILS :");
  Serial.print(" TaskCode1 - Task1       - Running On CORE ");
  Serial.println(xPortGetCoreID());
  Serial.println(" TaskCode1 - Task1       - COMPLETED");
  Serial.println("----------------------------------------------------------------");   
for(;;)
  {// OPENS TaskCode1 Main FOR Loop
  Serial.println(" Task1 - TERMINATED");
  Serial.println("");  

vTaskDelete(NULL);

  }  // CLOSES TaskCode1 Main FOR Loop
} // CLOSES TaskCode1

///////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////
//---------------------------------------- TASKCODE 2 ---------------------------------------
///////////////////////////////////////////////////////////////////////////////////////////
//  TaskCode2:  - 
//-------------------------------------------------------------------------------------------
void TaskCode2( void * pvParameters )
{ // OPENS TaskCode2
vTaskDelay(500);
  Serial.println("----------------------------------------------------------------");                         
  Serial.println("---------------------------- TaskCode2 -------------------------");
  Serial.println(" DETAILS :");
  Serial.print(" TaskCode2 - Task2       - Running On CORE ");
  Serial.println(xPortGetCoreID());
  Serial.println(" TaskCode2 - Task2       - COMPLETED");
  Serial.println("----------------------------------------------------------------");   
for(;;)
  {// OPENS TaskCode2 Main FOR Loop
  Serial.println(" Task2 - TERMINATED");
  Serial.println("");  

vTaskDelete(NULL);

  }  // CLOSES TaskCode2 Main FOR Loop
} // CLOSES TaskCode2


///////////////////////////////////////////////////////////////////////////////////////////
// BEGIN LOOP -----------------------------------------------------------------------------
///////////////////////////////////////////////////////////////////////////////////////////
void loop() 
{ // OPENS void loop
delay(1);
} // CLOSES void loop